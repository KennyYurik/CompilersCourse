nondeterministic grammar:

PROGRAM = DECLARATION_LIST
DECLARATION_LIST = DECLARATION DECLARATION_LIST | eps
DECLARATION = VAR_DECLARATION | FUNCTION_DECLARATION
VAR_DECLARATION = type ARRAY_DECLARATION VAR_LIST smcln
VAR_LIST = name VAR_LIST | eps
ARRAY_DECLARATION = op_sqr number cl_sqr | eps
FUNCTION_DECLARATION = name op_par ARG_LIST cl_par type BLOCK
ARG_LIST = type name ARG_LIST | eps
BLOCK = op_br COMMAND_LIST cl_br
COMMAND_LIST = COMMAND COMMAND_LIST | eps
COMMAND = VAR_DECLARATION | ASSIGN | IF_CLAUSE | WHILE_LOOP | RETURN_COMMAND | FUNCTION_CALL_COMMAND
ASSIGN = name assign EXPRESSION smcln
IF_CLAUSE = if op_par EXPRESSION cl_par BLOCK ELSE_CLAUSE
ELSE_CLAUSE = else BLOCK
WHILE_LOOP = while op_par EXPRESSION cl_par BLOCK
RETURN_COMMAND = return smcln | return EXPRESSION smcln
FUNCTION_CALL_COMMAND = FUNCTION_CALL smcln
FUNCTION_CALL = name op_par ARG_LIST_CALLING cl_par 
ARG_LIST_CALLING = eps | EXPRESSION ARG_LIST_CALLING2
ARG_LIST_CALLING2 = eps | comma EXPRESSION
EXPRESSION = EXPR1 OR_EXPR
OR_EXPR = or EXPR1 OR_EXPR | eps
EXPR1 = EXPR2 AND_EXPR
AND_EXPR = and EXPR2 AND_EXPR | eps
EXPR2 = not EXPR3 | EXPR3
EXPR3 = EXPR4 COMP_EXPR
COMP_EXPR = (eq | gr | less | gr_eq | less_eq) EXPR4 | eps
EXPR4 = EXPR5 PLUS_EXPR
PLUS_EXPR = (plus | minus) EXPR5 PLUS_EXPR | eps
EXPR5 = minus EXPR5 | EXPR6 MULT_EXPR
MULT_EXPR = (mul | div) EXPR6 MULT_EXPR | eps
EXPR6 = name | number | op_par EXPRESSION cl_par








~~ TODO - deterministic ~~

