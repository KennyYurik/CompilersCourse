/*
 * finding shortest paths in graph from 0 vertex, all w > 0
 * input: 
 * n - number of verteces
 * m - number of edges
 * next m rows: edges (non oriented)
 * v1 v2 w
 * output:
 * list of distances (-1 = unrechable)
 * 
 * example:
 * input
 * 6 5
 * 0 1 10
 * 2 1 3
 * 5 0 5
 * 5 2 4
 * 4 3 1
 * 
 * output:
 * 0
 * 10
 * 9
 * -1
 * -1
 * 5
 */
int[100] used;
int[100] dist;
int[1000] edges_from;
int[1000] edges_to;
int[1000] edges_weights;

int n;
int m;

int min(int a, int b) {
	if (a <= b) {
		return a;
	} else {
		return b;
	}
}

void dijkstra() {
	int i;
	i = 0;
	int min_value;
	min_value = 100000000;
	int min_index;
	min_index = 0 - 1;
	while (i < n) {
		if (used[i] == 0 & dist[i] < min_value) {
			min_value = dist[i];
			min_index = i;
		}
		i = i + 1;
	}
	if (min_index == 0 - 1) {
		return;
	}
	used[min_index] = 1;
	i = 0;
	while (i < m) {
		int v1;
		int v2;
		v1 = edges_from[i];
		v2 = edges_to[i];
		if (used[v1] == 0 & used[v2] == 1) {
			dist[v1] = min(dist[v1], dist[v2] + edges_weights[i]);
		}
		if (used[v1] == 1 & used[v2] == 0) {
			dist[v2] = min(dist[v2], dist[v1] + edges_weights[i]);
		}
		i = i + 1;
	}
	dijkstra();
}


void main() {
	n = read();
	m = read();
	int i;
	i = 0;
	
	while (i < n) {
		dist[i] = 100000000;
		i = i + 1;
	}
	i = 0;
	while (i < m) {
		edges_from[i] = read();
		edges_to[i] = read();
		edges_weights[i] = read();
		i = i + 1;
	}
	//used[0] = 1;
	dist[0] = 0;
	dijkstra();
	i = 0;
	while (i < n) {
		if (dist[i] < 100000000) {
			write(dist[i]);
		} else {
			write(0 - 1);
		}
		i = i + 1;
	}
}