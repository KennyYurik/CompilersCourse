grammar org.xtext.example.Mylang with org.eclipse.xtext.common.Terminals hidden(WS, ML_COMMENT, SL_COMMENT)

generate mylang "http://www.xtext.org/example/Mylang"

Program:
	declarations += Declaration*
;

Declaration:
	FunctionDecl | VariableDecl
;

VariableDecl:
	type = TYPE (array ?= '[' size = INT ']' )? name = ID ';'
;

FunctionDecl:
	type = TYPE name = ID 
	'(' (argList += ArgumentDecl (',' argList += ArgumentDecl)* )? ')' 
	body = Block
;

ArgumentDecl:
	type = TYPE name = ID 
;

Block:
	'{' commands += Command* '}'
;

Command:
	VariableDecl | Assign | If | While | Return | (FunctionCall ';')	
;

Assign:
	name = ID (array ?= '[' index = Expression ']')? '=' expression = Expression ';'
;

If:
	"if" '(' condition = Expression ')' body = Block (else ?= "else" elseBody = Block )?
;

While:
	"while" '(' condition = Expression ')' body = Block
;

Return:
	"return" (value = Expression)? ';'
;

Expression:
	first = AndExpr ('|' expr += AndExpr)*
;

AndExpr:
	first = CmpExpr ('&' expr += CmpExpr)*
;

CmpExpr:
	first = PlusExpr (type = CMP_TYPE second = PlusExpr)?	
;

PlusExpr:
	first = MulExpr (type += PLUS_TYPE expr += MulExpr)*
;

MulExpr:
	first = FinalExpr (type += MUL_TYPE expr += FinalExpr)*
;

FinalExpr:
	number = INT | FunctionCall | '(' expr = Expression ')' | variable = ID (array ?= '[' index = Expression ']')?
;

FunctionCall:
	name = ID '(' (args += Expression (',' args += Expression)*)? ')'
;

enum MUL_TYPE:
	MUL = '*' | DIV = '/'	
;

enum PLUS_TYPE:
	PLUS = '+' | MINUS = '-'	
;

enum CMP_TYPE:
	EQ = '=' | GR = '>' | LESS = '<' | NEQ = "!=" | NGR = "<=" | NLESS = ">="
;

enum TYPE:
	VOID = "void" | INTEGER = "int"
;